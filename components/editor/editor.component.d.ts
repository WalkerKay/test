import { OnInit, Renderer2, ElementRef, NgZone, EventEmitter } from '@angular/core';
import { Editor, Plugin } from 'slate';
import { SlaContentComponent } from '../content/content.component';
import { ValueChange } from '../../core/value-change';
import { Rendering } from '../../plugins/angular/rendering';
export declare class SlaEditorComponent implements OnInit {
    private ngZone;
    private render2;
    private element;
    private rendering;
    editor: Editor;
    slaValue: any;
    slaReadOnly: boolean;
    slaPlaceholder: string;
    spellcheck: boolean;
    tabIndex: number;
    slaContainerClass: any;
    plugins: Plugin[];
    commands: any;
    queries: any;
    schema: any;
    decorateNode: () => {};
    renderAnnotation: () => {};
    renderBlock: () => {};
    renderDecoration: () => {};
    renderDocument: () => {};
    renderEditor: () => {};
    renderInline: () => {};
    renderMark: () => {};
    onBeforeInput: () => {};
    onBlur: () => {};
    onClick: () => {};
    onContextMenu: () => {};
    onCompositionEnd: () => {};
    onCompositionStart: () => {};
    onCopy: () => {};
    onCut: () => {};
    onDragEnd: () => {};
    onDragEnter: () => {};
    onDragLeave: () => {};
    onDragOver: () => {};
    onDragStart: () => {};
    onDrop: () => {};
    onInput: () => {};
    onFocus: () => {};
    onKeyDown: () => {};
    onKeyUp: () => {};
    onMouseDown: () => {};
    onMouseUp: () => {};
    onPaste: () => {};
    onSelect: () => {};
    slaOnChange: EventEmitter<ValueChange>;
    slaEditorInitComplete: EventEmitter<Editor>;
    contentRef: SlaContentComponent;
    tmp: {
        mounted: boolean;
        change: any;
        resolves: number;
        updates: number;
        contentRef: any;
    };
    constructor(ngZone: NgZone, render2: Renderer2, element: ElementRef, rendering: Rendering);
    ngOnInit(): void;
    slaEvent(handler: string, event: Event): void;
    private setEditorContainerClass;
}
