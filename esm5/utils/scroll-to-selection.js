import getWindow from 'get-window';
import { IS_SAFARI, IS_IOS } from 'slate-dev-environment';
/**
 * CSS overflow values that would cause scrolling.
 *
 * @type {Array}
 */
var OVERFLOWS = ['auto', 'overlay', 'scroll'];
/**
 * Detect whether we are running IOS version 11
 */
var IS_IOS_11 = IS_IOS && !!window.navigator.userAgent.match(/os 11_/i);
function isBackward(selection) {
    var startNode = selection.anchorNode;
    var startOffset = selection.anchorOffset;
    var endNode = selection.focusNode;
    var endOffset = selection.focusOffset;
    var position = startNode.compareDocumentPosition(endNode);
    return !(position === 4 /* Node.DOCUMENT_POSITION_FOLLOWING */ ||
        (position === 0 && startOffset < endOffset));
}
/**
 * Find the nearest parent with scrolling, or window.
 *
 * @param {el} Element
 */
function findScrollContainer(el, window) {
    var parent = el.parentNode;
    var scroller;
    while (!scroller) {
        if (!parent.parentNode)
            break;
        var style = window.getComputedStyle(parent);
        var overflowY = style.overflowY;
        if (OVERFLOWS.includes(overflowY)) {
            scroller = parent;
            break;
        }
        parent = parent.parentNode;
    }
    // COMPAT: Because Chrome does not allow doucment.body.scrollTop, we're
    // assuming that window.scrollTo() should be used if the scrollable element
    // turns out to be document.body or document.documentElement. This will work
    // unless body is intentionally set to scrollable by restricting its height
    // (e.g. height: 100vh).
    if (!scroller) {
        return window.document.body;
    }
    return scroller;
}
/**
 * Scroll the current selection's focus point into view if needed.
 *
 * @param {Selection} selection
 */
function scrollToSelection(selection) {
    if (IS_IOS_11)
        return;
    if (!selection.anchorNode)
        return;
    var window = getWindow(selection.anchorNode);
    var scroller = findScrollContainer(selection.anchorNode, window);
    var isWindow = scroller === window.document.body || scroller === window.document.documentElement;
    var backward = isBackward(selection);
    var range = selection.getRangeAt(0).cloneRange();
    range.collapse(backward);
    var cursorRect = range.getBoundingClientRect();
    // COMPAT: range.getBoundingClientRect() returns 0s in Safari when range is
    // collapsed. Expanding the range by 1 is a relatively effective workaround
    // for vertical scroll, although horizontal may be off by 1 character.
    // https://bugs.webkit.org/show_bug.cgi?id=138949
    // https://bugs.chromium.org/p/chromium/issues/detail?id=435438
    if (IS_SAFARI) {
        if (range.collapsed && cursorRect.top === 0 && cursorRect.height === 0) {
            if (range.startOffset === 0) {
                range.setEnd(range.endContainer, 1);
            }
            else {
                range.setStart(range.startContainer, range.startOffset - 1);
            }
            cursorRect = range.getBoundingClientRect();
            if (cursorRect.top === 0 && cursorRect.height === 0) {
                if (range.getClientRects().length) {
                    cursorRect = range.getClientRects()[0];
                }
            }
        }
    }
    var width;
    var height;
    var yOffset;
    var xOffset;
    var scrollerTop = 0;
    var scrollerLeft = 0;
    var scrollerBordersY = 0;
    var scrollerBordersX = 0;
    var scrollerPaddingTop = 0;
    var scrollerPaddingBottom = 0;
    var scrollerPaddingLeft = 0;
    var scrollerPaddingRight = 0;
    if (isWindow) {
        var innerWidth_1 = window.innerWidth, innerHeight_1 = window.innerHeight, pageYOffset_1 = window.pageYOffset, pageXOffset_1 = window.pageXOffset;
        width = innerWidth_1;
        height = innerHeight_1;
        yOffset = pageYOffset_1;
        xOffset = pageXOffset_1;
    }
    else {
        var offsetWidth = scroller.offsetWidth, offsetHeight = scroller.offsetHeight, scrollTop = scroller.scrollTop, scrollLeft = scroller.scrollLeft;
        var _a = window.getComputedStyle(scroller), borderTopWidth = _a.borderTopWidth, borderBottomWidth = _a.borderBottomWidth, borderLeftWidth = _a.borderLeftWidth, borderRightWidth = _a.borderRightWidth, paddingTop = _a.paddingTop, paddingBottom = _a.paddingBottom, paddingLeft = _a.paddingLeft, paddingRight = _a.paddingRight;
        var scrollerRect = scroller.getBoundingClientRect();
        width = offsetWidth;
        height = offsetHeight;
        scrollerTop = scrollerRect.top + parseInt(borderTopWidth, 10);
        scrollerLeft = scrollerRect.left + parseInt(borderLeftWidth, 10);
        scrollerBordersY = parseInt(borderTopWidth, 10) + parseInt(borderBottomWidth, 10);
        scrollerBordersX = parseInt(borderLeftWidth, 10) + parseInt(borderRightWidth, 10);
        scrollerPaddingTop = parseInt(paddingTop, 10);
        scrollerPaddingBottom = parseInt(paddingBottom, 10);
        scrollerPaddingLeft = parseInt(paddingLeft, 10);
        scrollerPaddingRight = parseInt(paddingRight, 10);
        yOffset = scrollTop;
        xOffset = scrollLeft;
    }
    var cursorTop = cursorRect.top + yOffset - scrollerTop;
    var cursorLeft = cursorRect.left + xOffset - scrollerLeft;
    var x = xOffset;
    var y = yOffset;
    if (cursorLeft < xOffset) {
        // selection to the left of viewport
        x = cursorLeft - scrollerPaddingLeft;
    }
    else if (cursorLeft + cursorRect.width + scrollerBordersX > xOffset + width) {
        // selection to the right of viewport
        x = cursorLeft + scrollerBordersX + scrollerPaddingRight - width;
    }
    if (cursorTop < yOffset) {
        // selection above viewport
        y = cursorTop - scrollerPaddingTop;
    }
    else if (cursorTop + cursorRect.height + scrollerBordersY > yOffset + height) {
        // selection below viewport
        y = cursorTop + scrollerBordersY + scrollerPaddingBottom + cursorRect.height - height;
    }
    if (isWindow) {
        window.scrollTo(x, y);
    }
    else {
        scroller.scrollTop = y;
        scroller.scrollLeft = x;
    }
}
/**
 * Export.
 *
 * @type {Function}
 */
export default scrollToSelection;
//# sourceMappingURL=data:application/json;base64,