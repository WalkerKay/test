var CommandsPlugin = /** @class */ (function () {
    function CommandsPlugin() {
    }
    CommandsPlugin.reconcileNode = function (editor, node) {
        var value = editor.value;
        var document = value.document, selection = value.selection;
        var path = document.getPath(node.key);
        var domElement = editor.findDOMNode(path);
        var block = document.getClosestBlock(path);
        // Get text information
        var text = node.text;
        var domText = domElement.textContent;
        var isLastNode = block.nodes.last() === node;
        var lastChar = domText.charAt(domText.length - 1);
        // COMPAT: If this is the last leaf, and the DOM text ends in a new line,
        // we will have added another new line in <Leaf>'s render method to account
        // for browsers collapsing a single trailing new lines, so remove it.
        if (isLastNode && lastChar === '\n') {
            domText = domText.slice(0, -1);
        }
        // If the text is no different, abort.
        if (text === domText)
            return;
        var entire = selection.moveAnchorTo(path, 0).moveFocusTo(path, text.length);
        entire = document.resolveRange(entire);
        // Change the current value to have the leaf's text replaced.
        editor.insertTextAtRange(entire, domText, node.marks);
        return;
    };
    CommandsPlugin.reconcileDOMNode = function (editor, domNode) {
        var domElement = domNode.parentElement.closest('[data-key]');
        var node = editor.findNode(domElement);
        editor.reconcileNode(node);
    };
    // slate origin remove mark method
    CommandsPlugin.removeMarkOrigin = function (editor, mark) {
        var value = editor.value;
        var document = value.document, selection = value.selection, anchorText = value.anchorText;
        if (selection.isExpanded) {
            editor.removeMarkAtRange(selection, mark);
        }
        else if (selection.marks) {
            var marks = selection.marks.remove(mark);
            var sel = selection.set('marks', marks);
            editor.select(sel);
        }
        else {
            var marks = document.getActiveMarksAtRange(selection).remove(mark);
            var sel = selection.set('marks', marks);
            editor.select(sel);
        }
    };
    CommandsPlugin.removeMark = function (editor, mark) {
        var value = editor.value;
        var document = value.document, selection = value.selection, anchorText = value.anchorText;
        if (selection.isExpanded) {
            editor.removeMarkAtRange(selection, mark);
        }
        else if (selection.marks) {
            var marks = selection.marks.remove(mark);
            var sel = selection.set('marks', marks);
            editor.select(sel);
        }
        else {
            var marks = document.getActiveMarksAtRange(selection).remove(mark);
            var sel = selection.set('marks', marks);
            editor.select(sel);
        }
        // The cursor position is still in mark when mark is cancelled
        if (selection.isCollapsed && anchorText.text === '\u200B') {
            editor.removeMarkByPath(selection.start.path, 0, 1, mark);
        }
        if (selection.isCollapsed && anchorText.text !== '\u200B' && anchorText.text !== '') {
            editor.insertText('\u200B');
        }
    };
    CommandsPlugin.addMark = function (editor, mark) {
        var value = editor.value;
        var document = value.document, selection = value.selection, anchorText = value.anchorText;
        if (selection.isExpanded) {
            editor.addMarkAtRange(selection, mark);
        }
        else if (selection.marks) {
            var marks = selection.marks.add(mark);
            var sel = selection.set('marks', marks);
            editor.select(sel);
        }
        else {
            var marks = document.getActiveMarksAtRange(selection).add(mark);
            var sel = selection.set('marks', marks);
            editor.select(sel);
        }
        // The cursor position is still in mark when mark is cancelled
        if (selection.isCollapsed && anchorText.text === '\u200B') {
            editor.addMarkByPath(selection.start.path, 0, 1, mark);
        }
        if (selection.isCollapsed && anchorText.text !== '\u200B' && anchorText.text !== '') {
            editor.insertText('\u200B');
        }
    };
    return CommandsPlugin;
}());
export default {
    commands: CommandsPlugin
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LXNsYXRlL2NvcmUvIiwic291cmNlcyI6WyJwbHVnaW5zL2FuZ3VsYXIvY29tbWFuZHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUE7SUFBQTtJQTZHQSxDQUFDO0lBM0dVLDRCQUFhLEdBQXBCLFVBQXFCLE1BQU0sRUFBRSxJQUFJO1FBQ3JCLElBQUEsb0JBQUssQ0FBWTtRQUNqQixJQUFBLHlCQUFRLEVBQUUsMkJBQVMsQ0FBVztRQUN0QyxJQUFNLElBQUksR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUV4QyxJQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVDLElBQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFN0MsdUJBQXVCO1FBQ2YsSUFBQSxnQkFBSSxDQUFVO1FBQ2hCLElBQUEsZ0NBQW9CLENBQWdCO1FBRTFDLElBQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEtBQUssSUFBSSxDQUFDO1FBQy9DLElBQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztRQUVwRCx5RUFBeUU7UUFDekUsMkVBQTJFO1FBQzNFLHFFQUFxRTtRQUNyRSxJQUFJLFVBQVUsSUFBSSxRQUFRLEtBQUssSUFBSSxFQUFFO1lBQ2pDLE9BQU8sR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2xDO1FBRUQsc0NBQXNDO1FBQ3RDLElBQUksSUFBSSxLQUFLLE9BQU87WUFBRSxPQUFPO1FBRTdCLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLFdBQVcs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QyxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQzFEO1FBQ0QsSUFBSSxTQUFTLENBQUMsV0FBVyxJQUFJLFVBQVUsQ0FBQyxJQUFJLEtBQUssUUFBUSxJQUFJLFVBQVUsQ0FBQyxJQUFJLEtBQUssRUFBRSxFQUFFO1lBQ2pGLE1BQU0sQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDL0I7SUFDTCxDQUFDO0lBQ0wscUJBQUM7QUFBRCxDQUFDLEFBN0dELElBNkdDO0FBRUQsZUFBZTtJQUNYLFFBQVEsRUFBRSxjQUFjO0NBQzNCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFZGl0b3IgfSBmcm9tICdzbGF0ZSc7XG5cbmNsYXNzIENvbW1hbmRzUGx1Z2luIHtcblxuICAgIHN0YXRpYyByZWNvbmNpbGVOb2RlKGVkaXRvciwgbm9kZSkge1xuICAgICAgICBjb25zdCB7IHZhbHVlIH0gPSBlZGl0b3I7XG4gICAgICAgIGNvbnN0IHsgZG9jdW1lbnQsIHNlbGVjdGlvbiB9ID0gdmFsdWU7XG4gICAgICAgIGNvbnN0IHBhdGggPSBkb2N1bWVudC5nZXRQYXRoKG5vZGUua2V5KTtcblxuICAgICAgICBjb25zdCBkb21FbGVtZW50ID0gZWRpdG9yLmZpbmRET01Ob2RlKHBhdGgpO1xuICAgICAgICBjb25zdCBibG9jayA9IGRvY3VtZW50LmdldENsb3Nlc3RCbG9jayhwYXRoKTtcblxuICAgICAgICAvLyBHZXQgdGV4dCBpbmZvcm1hdGlvblxuICAgICAgICBjb25zdCB7IHRleHQgfSA9IG5vZGU7XG4gICAgICAgIGxldCB7IHRleHRDb250ZW50OiBkb21UZXh0IH0gPSBkb21FbGVtZW50O1xuXG4gICAgICAgIGNvbnN0IGlzTGFzdE5vZGUgPSBibG9jay5ub2Rlcy5sYXN0KCkgPT09IG5vZGU7XG4gICAgICAgIGNvbnN0IGxhc3RDaGFyID0gZG9tVGV4dC5jaGFyQXQoZG9tVGV4dC5sZW5ndGggLSAxKTtcblxuICAgICAgICAvLyBDT01QQVQ6IElmIHRoaXMgaXMgdGhlIGxhc3QgbGVhZiwgYW5kIHRoZSBET00gdGV4dCBlbmRzIGluIGEgbmV3IGxpbmUsXG4gICAgICAgIC8vIHdlIHdpbGwgaGF2ZSBhZGRlZCBhbm90aGVyIG5ldyBsaW5lIGluIDxMZWFmPidzIHJlbmRlciBtZXRob2QgdG8gYWNjb3VudFxuICAgICAgICAvLyBmb3IgYnJvd3NlcnMgY29sbGFwc2luZyBhIHNpbmdsZSB0cmFpbGluZyBuZXcgbGluZXMsIHNvIHJlbW92ZSBpdC5cbiAgICAgICAgaWYgKGlzTGFzdE5vZGUgJiYgbGFzdENoYXIgPT09ICdcXG4nKSB7XG4gICAgICAgICAgICBkb21UZXh0ID0gZG9tVGV4dC5zbGljZSgwLCAtMSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiB0aGUgdGV4dCBpcyBubyBkaWZmZXJlbnQsIGFib3J0LlxuICAgICAgICBpZiAodGV4dCA9PT0gZG9tVGV4dCkgcmV0dXJuO1xuXG4gICAgICAgIGxldCBlbnRpcmUgPSBzZWxlY3Rpb24ubW92ZUFuY2hvclRvKHBhdGgsIDApLm1vdmVGb2N1c1RvKHBhdGgsIHRleHQubGVuZ3RoKTtcblxuICAgICAgICBlbnRpcmUgPSBkb2N1bWVudC5yZXNvbHZlUmFuZ2UoZW50aXJlKTtcblxuICAgICAgICAvLyBDaGFuZ2UgdGhlIGN1cnJlbnQgdmFsdWUgdG8gaGF2ZSB0aGUgbGVhZidzIHRleHQgcmVwbGFjZWQuXG4gICAgICAgIGVkaXRvci5pbnNlcnRUZXh0QXRSYW5nZShlbnRpcmUsIGRvbVRleHQsIG5vZGUubWFya3MpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3RhdGljIHJlY29uY2lsZURPTU5vZGUoZWRpdG9yLCBkb21Ob2RlKSB7XG4gICAgICAgIGNvbnN0IGRvbUVsZW1lbnQgPSBkb21Ob2RlLnBhcmVudEVsZW1lbnQuY2xvc2VzdCgnW2RhdGEta2V5XScpO1xuICAgICAgICBjb25zdCBub2RlID0gZWRpdG9yLmZpbmROb2RlKGRvbUVsZW1lbnQpO1xuICAgICAgICBlZGl0b3IucmVjb25jaWxlTm9kZShub2RlKTtcbiAgICB9XG5cbiAgICAvLyBzbGF0ZSBvcmlnaW4gcmVtb3ZlIG1hcmsgbWV0aG9kXG4gICAgc3RhdGljIHJlbW92ZU1hcmtPcmlnaW4oZWRpdG9yLCBtYXJrKSB7XG4gICAgICAgIGNvbnN0IHsgdmFsdWUgfSA9IGVkaXRvcjtcbiAgICAgICAgY29uc3QgeyBkb2N1bWVudCwgc2VsZWN0aW9uLCBhbmNob3JUZXh0IH0gPSB2YWx1ZTtcblxuICAgICAgICBpZiAoc2VsZWN0aW9uLmlzRXhwYW5kZWQpIHtcbiAgICAgICAgICAgIGVkaXRvci5yZW1vdmVNYXJrQXRSYW5nZShzZWxlY3Rpb24sIG1hcmspO1xuICAgICAgICB9IGVsc2UgaWYgKHNlbGVjdGlvbi5tYXJrcykge1xuICAgICAgICAgICAgY29uc3QgbWFya3MgPSBzZWxlY3Rpb24ubWFya3MucmVtb3ZlKG1hcmspO1xuICAgICAgICAgICAgY29uc3Qgc2VsID0gc2VsZWN0aW9uLnNldCgnbWFya3MnLCBtYXJrcyk7XG4gICAgICAgICAgICBlZGl0b3Iuc2VsZWN0KHNlbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBtYXJrcyA9IGRvY3VtZW50LmdldEFjdGl2ZU1hcmtzQXRSYW5nZShzZWxlY3Rpb24pLnJlbW92ZShtYXJrKTtcbiAgICAgICAgICAgIGNvbnN0IHNlbCA9IHNlbGVjdGlvbi5zZXQoJ21hcmtzJywgbWFya3MpO1xuICAgICAgICAgICAgZWRpdG9yLnNlbGVjdChzZWwpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIHJlbW92ZU1hcmsoZWRpdG9yLCBtYXJrKSB7XG4gICAgICAgIGNvbnN0IHsgdmFsdWUgfSA9IGVkaXRvcjtcbiAgICAgICAgY29uc3QgeyBkb2N1bWVudCwgc2VsZWN0aW9uLCBhbmNob3JUZXh0IH0gPSB2YWx1ZTtcblxuICAgICAgICBpZiAoc2VsZWN0aW9uLmlzRXhwYW5kZWQpIHtcbiAgICAgICAgICAgIGVkaXRvci5yZW1vdmVNYXJrQXRSYW5nZShzZWxlY3Rpb24sIG1hcmspO1xuICAgICAgICB9IGVsc2UgaWYgKHNlbGVjdGlvbi5tYXJrcykge1xuICAgICAgICAgICAgY29uc3QgbWFya3MgPSBzZWxlY3Rpb24ubWFya3MucmVtb3ZlKG1hcmspO1xuICAgICAgICAgICAgY29uc3Qgc2VsID0gc2VsZWN0aW9uLnNldCgnbWFya3MnLCBtYXJrcyk7XG4gICAgICAgICAgICBlZGl0b3Iuc2VsZWN0KHNlbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBtYXJrcyA9IGRvY3VtZW50LmdldEFjdGl2ZU1hcmtzQXRSYW5nZShzZWxlY3Rpb24pLnJlbW92ZShtYXJrKTtcbiAgICAgICAgICAgIGNvbnN0IHNlbCA9IHNlbGVjdGlvbi5zZXQoJ21hcmtzJywgbWFya3MpO1xuICAgICAgICAgICAgZWRpdG9yLnNlbGVjdChzZWwpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlIGN1cnNvciBwb3NpdGlvbiBpcyBzdGlsbCBpbiBtYXJrIHdoZW4gbWFyayBpcyBjYW5jZWxsZWRcbiAgICAgICAgaWYgKHNlbGVjdGlvbi5pc0NvbGxhcHNlZCAmJiBhbmNob3JUZXh0LnRleHQgPT09ICdcXHUyMDBCJykge1xuICAgICAgICAgICAgZWRpdG9yLnJlbW92ZU1hcmtCeVBhdGgoc2VsZWN0aW9uLnN0YXJ0LnBhdGgsIDAsIDEsIG1hcmspO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZWxlY3Rpb24uaXNDb2xsYXBzZWQgJiYgYW5jaG9yVGV4dC50ZXh0ICE9PSAnXFx1MjAwQicgJiYgYW5jaG9yVGV4dC50ZXh0ICE9PSAnJykge1xuICAgICAgICAgICAgZWRpdG9yLmluc2VydFRleHQoJ1xcdTIwMEInKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyBhZGRNYXJrKGVkaXRvciwgbWFyaykge1xuICAgICAgICBjb25zdCB7IHZhbHVlIH0gPSBlZGl0b3I7XG4gICAgICAgIGNvbnN0IHsgZG9jdW1lbnQsIHNlbGVjdGlvbiwgYW5jaG9yVGV4dCB9ID0gdmFsdWU7XG5cbiAgICAgICAgaWYgKHNlbGVjdGlvbi5pc0V4cGFuZGVkKSB7XG4gICAgICAgICAgICBlZGl0b3IuYWRkTWFya0F0UmFuZ2Uoc2VsZWN0aW9uLCBtYXJrKTtcbiAgICAgICAgfSBlbHNlIGlmIChzZWxlY3Rpb24ubWFya3MpIHtcbiAgICAgICAgICAgIGNvbnN0IG1hcmtzID0gc2VsZWN0aW9uLm1hcmtzLmFkZChtYXJrKTtcbiAgICAgICAgICAgIGNvbnN0IHNlbCA9IHNlbGVjdGlvbi5zZXQoJ21hcmtzJywgbWFya3MpO1xuICAgICAgICAgICAgZWRpdG9yLnNlbGVjdChzZWwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgbWFya3MgPSBkb2N1bWVudC5nZXRBY3RpdmVNYXJrc0F0UmFuZ2Uoc2VsZWN0aW9uKS5hZGQobWFyayk7XG4gICAgICAgICAgICBjb25zdCBzZWwgPSBzZWxlY3Rpb24uc2V0KCdtYXJrcycsIG1hcmtzKTtcbiAgICAgICAgICAgIGVkaXRvci5zZWxlY3Qoc2VsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZSBjdXJzb3IgcG9zaXRpb24gaXMgc3RpbGwgaW4gbWFyayB3aGVuIG1hcmsgaXMgY2FuY2VsbGVkXG4gICAgICAgIGlmIChzZWxlY3Rpb24uaXNDb2xsYXBzZWQgJiYgYW5jaG9yVGV4dC50ZXh0ID09PSAnXFx1MjAwQicpIHtcbiAgICAgICAgICAgIGVkaXRvci5hZGRNYXJrQnlQYXRoKHNlbGVjdGlvbi5zdGFydC5wYXRoLCAwLCAxLCBtYXJrKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VsZWN0aW9uLmlzQ29sbGFwc2VkICYmIGFuY2hvclRleHQudGV4dCAhPT0gJ1xcdTIwMEInICYmIGFuY2hvclRleHQudGV4dCAhPT0gJycpIHtcbiAgICAgICAgICAgIGVkaXRvci5pbnNlcnRUZXh0KCdcXHUyMDBCJyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBjb21tYW5kczogQ29tbWFuZHNQbHVnaW5cbn07XG4iXX0=