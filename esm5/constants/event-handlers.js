var EVENT_HANDLERS = [
    'onBeforeInput',
    'onBlur',
    'onClick',
    'onContextMenu',
    'onCompositionEnd',
    'onCompositionStart',
    'onCopy',
    'onCut',
    'onDragEnd',
    'onDragEnter',
    'onDragExit',
    'onDragLeave',
    'onDragOver',
    'onDragStart',
    'onDrop',
    'onInput',
    'onFocus',
    'onKeyDown',
    'onKeyUp',
    'onMouseDown',
    'onMouseUp',
    'onPaste',
    'onSelect'
];
var NgxSlateEvent = /** @class */ (function () {
    function NgxSlateEvent() {
    }
    return NgxSlateEvent;
}());
export { NgxSlateEvent };
export var NGX_SLATE_EVENTS = [
    { name: 'blur', handler: 'onBlur', isTriggerBeforeInput: true },
    { name: 'compositionstart', handler: 'onCompositionStart', isTriggerBeforeInput: true },
    { name: 'compositionupdate', handler: null, isTriggerBeforeInput: true },
    { name: 'compositionend', handler: 'onCompositionEnd', isTriggerBeforeInput: true },
    { name: 'keydown', handler: 'onKeyDown', isTriggerBeforeInput: true },
    { name: 'keypress', handler: null, isTriggerBeforeInput: true },
    { name: 'keyup', handler: 'onKeyUp', isTriggerBeforeInput: true },
    { name: 'mousedown', handler: 'onMouseDown', isTriggerBeforeInput: true },
    { name: 'textInput', handler: null, isTriggerBeforeInput: true },
    { name: 'paste', handler: 'onPaste', isTriggerBeforeInput: true },
    { name: 'click', handler: 'onClick', isTriggerBeforeInput: false },
    { name: 'contextmenu', handler: 'onContextMenu', isTriggerBeforeInput: false },
    { name: 'copy', handler: 'onCopy', isTriggerBeforeInput: false },
    { name: 'cut', handler: 'onCut', isTriggerBeforeInput: false },
    // { name: 'input', handler: 'onInput', isTriggerBeforeInput: false },
    { name: 'focus', handler: 'onFocus', isTriggerBeforeInput: false },
    { name: 'cut', handler: 'onCut', isTriggerBeforeInput: false },
    { name: 'mouseup', handler: 'onMouseUp', isTriggerBeforeInput: false },
    { name: 'select', handler: 'onSelect', isTriggerBeforeInput: false },
    { name: 'drop', handler: 'onDrop', isTriggerBeforeInput: false }
];
/**
 * Export.
 *
 * @type {Array}
 */
export default EVENT_HANDLERS;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQtaGFuZGxlcnMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LXNsYXRlL2NvcmUvIiwic291cmNlcyI6WyJjb25zdGFudHMvZXZlbnQtaGFuZGxlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBTSxjQUFjLEdBQUc7SUFDbkIsZUFBZTtJQUNmLFFBQVE7SUFDUixTQUFTO0lBQ1QsZUFBZTtJQUNmLGtCQUFrQjtJQUNsQixvQkFBb0I7SUFDcEIsUUFBUTtJQUNSLE9BQU87SUFDUCxXQUFXO0lBQ1gsYUFBYTtJQUNiLFlBQVk7SUFDWixhQUFhO0lBQ2IsWUFBWTtJQUNaLGFBQWE7SUFDYixRQUFRO0lBQ1IsU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULGFBQWE7SUFDYixXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7Q0FDYixDQUFDO0FBRUY7SUFBQTtJQUlBLENBQUM7SUFBRCxvQkFBQztBQUFELENBQUMsQUFKRCxJQUlDOztBQUVELE1BQU0sQ0FBQyxJQUFNLGdCQUFnQixHQUFvQjtJQUM3QyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxvQkFBb0IsRUFBRSxJQUFJLEVBQUU7SUFDL0QsRUFBRSxJQUFJLEVBQUUsa0JBQWtCLEVBQUUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLG9CQUFvQixFQUFFLElBQUksRUFBRTtJQUN2RixFQUFFLElBQUksRUFBRSxtQkFBbUIsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLG9CQUFvQixFQUFFLElBQUksRUFBRTtJQUN4RSxFQUFFLElBQUksRUFBRSxnQkFBZ0IsRUFBRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsb0JBQW9CLEVBQUUsSUFBSSxFQUFFO0lBQ25GLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLG9CQUFvQixFQUFFLElBQUksRUFBRTtJQUNyRSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxvQkFBb0IsRUFBRSxJQUFJLEVBQUU7SUFDL0QsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsb0JBQW9CLEVBQUUsSUFBSSxFQUFFO0lBQ2pFLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLG9CQUFvQixFQUFFLElBQUksRUFBRTtJQUN6RSxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxvQkFBb0IsRUFBRSxJQUFJLEVBQUU7SUFDaEUsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsb0JBQW9CLEVBQUUsSUFBSSxFQUFFO0lBQ2pFLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLG9CQUFvQixFQUFFLEtBQUssRUFBRTtJQUNsRSxFQUFFLElBQUksRUFBRSxhQUFhLEVBQUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxvQkFBb0IsRUFBRSxLQUFLLEVBQUU7SUFDOUUsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsb0JBQW9CLEVBQUUsS0FBSyxFQUFFO0lBQ2hFLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLEtBQUssRUFBRTtJQUM5RCxzRUFBc0U7SUFDdEUsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsb0JBQW9CLEVBQUUsS0FBSyxFQUFFO0lBQ2xFLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLEtBQUssRUFBRTtJQUM5RCxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxvQkFBb0IsRUFBRSxLQUFLLEVBQUU7SUFDdEUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsb0JBQW9CLEVBQUUsS0FBSyxFQUFFO0lBQ3BFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLG9CQUFvQixFQUFFLEtBQUssRUFBRTtDQUNuRSxDQUFDO0FBQ0Y7Ozs7R0FJRztBQUVILGVBQWUsY0FBYyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgRVZFTlRfSEFORExFUlMgPSBbXG4gICAgJ29uQmVmb3JlSW5wdXQnLFxuICAgICdvbkJsdXInLFxuICAgICdvbkNsaWNrJyxcbiAgICAnb25Db250ZXh0TWVudScsXG4gICAgJ29uQ29tcG9zaXRpb25FbmQnLFxuICAgICdvbkNvbXBvc2l0aW9uU3RhcnQnLFxuICAgICdvbkNvcHknLFxuICAgICdvbkN1dCcsXG4gICAgJ29uRHJhZ0VuZCcsXG4gICAgJ29uRHJhZ0VudGVyJyxcbiAgICAnb25EcmFnRXhpdCcsXG4gICAgJ29uRHJhZ0xlYXZlJyxcbiAgICAnb25EcmFnT3ZlcicsXG4gICAgJ29uRHJhZ1N0YXJ0JyxcbiAgICAnb25Ecm9wJyxcbiAgICAnb25JbnB1dCcsXG4gICAgJ29uRm9jdXMnLFxuICAgICdvbktleURvd24nLFxuICAgICdvbktleVVwJyxcbiAgICAnb25Nb3VzZURvd24nLFxuICAgICdvbk1vdXNlVXAnLFxuICAgICdvblBhc3RlJyxcbiAgICAnb25TZWxlY3QnXG5dO1xuXG5leHBvcnQgY2xhc3MgTmd4U2xhdGVFdmVudCB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGhhbmRsZXI6IHN0cmluZztcbiAgICBpc1RyaWdnZXJCZWZvcmVJbnB1dDogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNvbnN0IE5HWF9TTEFURV9FVkVOVFM6IE5neFNsYXRlRXZlbnRbXSA9IFtcbiAgICB7IG5hbWU6ICdibHVyJywgaGFuZGxlcjogJ29uQmx1cicsIGlzVHJpZ2dlckJlZm9yZUlucHV0OiB0cnVlIH0sXG4gICAgeyBuYW1lOiAnY29tcG9zaXRpb25zdGFydCcsIGhhbmRsZXI6ICdvbkNvbXBvc2l0aW9uU3RhcnQnLCBpc1RyaWdnZXJCZWZvcmVJbnB1dDogdHJ1ZSB9LFxuICAgIHsgbmFtZTogJ2NvbXBvc2l0aW9udXBkYXRlJywgaGFuZGxlcjogbnVsbCwgaXNUcmlnZ2VyQmVmb3JlSW5wdXQ6IHRydWUgfSxcbiAgICB7IG5hbWU6ICdjb21wb3NpdGlvbmVuZCcsIGhhbmRsZXI6ICdvbkNvbXBvc2l0aW9uRW5kJywgaXNUcmlnZ2VyQmVmb3JlSW5wdXQ6IHRydWUgfSxcbiAgICB7IG5hbWU6ICdrZXlkb3duJywgaGFuZGxlcjogJ29uS2V5RG93bicsIGlzVHJpZ2dlckJlZm9yZUlucHV0OiB0cnVlIH0sXG4gICAgeyBuYW1lOiAna2V5cHJlc3MnLCBoYW5kbGVyOiBudWxsLCBpc1RyaWdnZXJCZWZvcmVJbnB1dDogdHJ1ZSB9LFxuICAgIHsgbmFtZTogJ2tleXVwJywgaGFuZGxlcjogJ29uS2V5VXAnLCBpc1RyaWdnZXJCZWZvcmVJbnB1dDogdHJ1ZSB9LFxuICAgIHsgbmFtZTogJ21vdXNlZG93bicsIGhhbmRsZXI6ICdvbk1vdXNlRG93bicsIGlzVHJpZ2dlckJlZm9yZUlucHV0OiB0cnVlIH0sXG4gICAgeyBuYW1lOiAndGV4dElucHV0JywgaGFuZGxlcjogbnVsbCwgaXNUcmlnZ2VyQmVmb3JlSW5wdXQ6IHRydWUgfSxcbiAgICB7IG5hbWU6ICdwYXN0ZScsIGhhbmRsZXI6ICdvblBhc3RlJywgaXNUcmlnZ2VyQmVmb3JlSW5wdXQ6IHRydWUgfSxcbiAgICB7IG5hbWU6ICdjbGljaycsIGhhbmRsZXI6ICdvbkNsaWNrJywgaXNUcmlnZ2VyQmVmb3JlSW5wdXQ6IGZhbHNlIH0sXG4gICAgeyBuYW1lOiAnY29udGV4dG1lbnUnLCBoYW5kbGVyOiAnb25Db250ZXh0TWVudScsIGlzVHJpZ2dlckJlZm9yZUlucHV0OiBmYWxzZSB9LFxuICAgIHsgbmFtZTogJ2NvcHknLCBoYW5kbGVyOiAnb25Db3B5JywgaXNUcmlnZ2VyQmVmb3JlSW5wdXQ6IGZhbHNlIH0sXG4gICAgeyBuYW1lOiAnY3V0JywgaGFuZGxlcjogJ29uQ3V0JywgaXNUcmlnZ2VyQmVmb3JlSW5wdXQ6IGZhbHNlIH0sXG4gICAgLy8geyBuYW1lOiAnaW5wdXQnLCBoYW5kbGVyOiAnb25JbnB1dCcsIGlzVHJpZ2dlckJlZm9yZUlucHV0OiBmYWxzZSB9LFxuICAgIHsgbmFtZTogJ2ZvY3VzJywgaGFuZGxlcjogJ29uRm9jdXMnLCBpc1RyaWdnZXJCZWZvcmVJbnB1dDogZmFsc2UgfSxcbiAgICB7IG5hbWU6ICdjdXQnLCBoYW5kbGVyOiAnb25DdXQnLCBpc1RyaWdnZXJCZWZvcmVJbnB1dDogZmFsc2UgfSxcbiAgICB7IG5hbWU6ICdtb3VzZXVwJywgaGFuZGxlcjogJ29uTW91c2VVcCcsIGlzVHJpZ2dlckJlZm9yZUlucHV0OiBmYWxzZSB9LFxuICAgIHsgbmFtZTogJ3NlbGVjdCcsIGhhbmRsZXI6ICdvblNlbGVjdCcsIGlzVHJpZ2dlckJlZm9yZUlucHV0OiBmYWxzZSB9LFxuICAgIHsgbmFtZTogJ2Ryb3AnLCBoYW5kbGVyOiAnb25Ecm9wJywgaXNUcmlnZ2VyQmVmb3JlSW5wdXQ6IGZhbHNlIH1cbl07XG4vKipcbiAqIEV4cG9ydC5cbiAqXG4gKiBAdHlwZSB7QXJyYXl9XG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgRVZFTlRfSEFORExFUlM7XG4iXX0=