class CommandsPlugin {
    static reconcileNode(editor, node) {
        const { value } = editor;
        const { document, selection } = value;
        const path = document.getPath(node.key);
        const domElement = editor.findDOMNode(path);
        const block = document.getClosestBlock(path);
        // Get text information
        const { text } = node;
        let { textContent: domText } = domElement;
        const isLastNode = block.nodes.last() === node;
        const lastChar = domText.charAt(domText.length - 1);
        // COMPAT: If this is the last leaf, and the DOM text ends in a new line,
        // we will have added another new line in <Leaf>'s render method to account
        // for browsers collapsing a single trailing new lines, so remove it.
        if (isLastNode && lastChar === '\n') {
            domText = domText.slice(0, -1);
        }
        // If the text is no different, abort.
        if (text === domText)
            return;
        let entire = selection.moveAnchorTo(path, 0).moveFocusTo(path, text.length);
        entire = document.resolveRange(entire);
        // Change the current value to have the leaf's text replaced.
        editor.insertTextAtRange(entire, domText, node.marks);
        return;
    }
    static reconcileDOMNode(editor, domNode) {
        const domElement = domNode.parentElement.closest('[data-key]');
        const node = editor.findNode(domElement);
        editor.reconcileNode(node);
    }
    // slate origin remove mark method
    static removeMarkOrigin(editor, mark) {
        const { value } = editor;
        const { document, selection, anchorText } = value;
        if (selection.isExpanded) {
            editor.removeMarkAtRange(selection, mark);
        }
        else if (selection.marks) {
            const marks = selection.marks.remove(mark);
            const sel = selection.set('marks', marks);
            editor.select(sel);
        }
        else {
            const marks = document.getActiveMarksAtRange(selection).remove(mark);
            const sel = selection.set('marks', marks);
            editor.select(sel);
        }
    }
    static removeMark(editor, mark) {
        const { value } = editor;
        const { document, selection, anchorText } = value;
        if (selection.isExpanded) {
            editor.removeMarkAtRange(selection, mark);
        }
        else if (selection.marks) {
            const marks = selection.marks.remove(mark);
            const sel = selection.set('marks', marks);
            editor.select(sel);
        }
        else {
            const marks = document.getActiveMarksAtRange(selection).remove(mark);
            const sel = selection.set('marks', marks);
            editor.select(sel);
        }
        // The cursor position is still in mark when mark is cancelled
        if (selection.isCollapsed && anchorText.text === '\u200B') {
            editor.removeMarkByPath(selection.start.path, 0, 1, mark);
        }
        if (selection.isCollapsed && anchorText.text !== '\u200B' && anchorText.text !== '') {
            editor.insertText('\u200B');
        }
    }
    static addMark(editor, mark) {
        const { value } = editor;
        const { document, selection, anchorText } = value;
        if (selection.isExpanded) {
            editor.addMarkAtRange(selection, mark);
        }
        else if (selection.marks) {
            const marks = selection.marks.add(mark);
            const sel = selection.set('marks', marks);
            editor.select(sel);
        }
        else {
            const marks = document.getActiveMarksAtRange(selection).add(mark);
            const sel = selection.set('marks', marks);
            editor.select(sel);
        }
        // The cursor position is still in mark when mark is cancelled
        if (selection.isCollapsed && anchorText.text === '\u200B') {
            editor.addMarkByPath(selection.start.path, 0, 1, mark);
        }
        if (selection.isCollapsed && anchorText.text !== '\u200B' && anchorText.text !== '') {
            editor.insertText('\u200B');
        }
    }
}
export default {
    commands: CommandsPlugin
};
//# sourceMappingURL=data:application/json;base64,