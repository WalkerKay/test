import { ViewChild, Input, ViewContainerRef, ElementRef, QueryList } from '@angular/core';
import { Editor, Block } from 'slate';
export class SlaPluginComponentBase {
    constructor(elementRef) {
        this.elementRef = elementRef;
    }
    initPluginComponent() {
        this.insertChildrenView();
        this.setNodeAttributes(this.elementRef.nativeElement, this.attributes);
    }
    getData(key) {
        return this.node.data.get(key);
    }
    isNodeChange(changes) {
        const node = changes.node;
        if (node && !node.isFirstChange) {
            return true;
        }
        return false;
    }
    updateHostClass(classMap) {
        for (const key in classMap) {
            if (classMap.hasOwnProperty(key)) {
                const value = classMap[key];
                const classList = this.elementRef.nativeElement.classList;
                if (value) {
                    if (!classList.contains(key)) {
                        classList.add(key);
                    }
                }
                else {
                    if (classList.contains(key)) {
                        classList.remove(key);
                    }
                }
            }
        }
    }
    setNodeAttributes(ele, attributes) {
        for (const key in attributes) {
            if (attributes.hasOwnProperty(key)) {
                ele.setAttribute(key, attributes[key]);
            }
        }
    }
    insertChildrenView() {
        if (this.childrenContent) {
            const nodeRefs = this.children.toArray();
            for (const nodeRef of nodeRefs) {
                this.childrenContent.nativeElement.appendChild(nodeRef.rootNode);
            }
        }
    }
    removeNode(event) {
        event.preventDefault();
        const path = this.editor.value.document.getPath(this.node.key);
        let focusNode = this.editor.value.document.getPreviousBlock(path);
        if (!focusNode) {
            focusNode = this.editor.value.document.getNextBlock(path);
        }
        this.editor.focus().moveToEndOfNode(focusNode);
        this.editor.removeNodeByKey(this.node.key);
    }
}
SlaPluginComponentBase.propDecorators = {
    editor: [{ type: Input }],
    node: [{ type: Input }],
    parent: [{ type: Input }],
    isFocused: [{ type: Input }],
    isSelected: [{ type: Input }],
    readOnly: [{ type: Input }],
    children: [{ type: Input }],
    attributes: [{ type: Input }],
    nodeViewContainerRef: [{ type: Input }],
    childrenContent: [{ type: ViewChild, args: ['childrenContent', { read: ElementRef, static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGx1Z2luLWNvbXBvbmVudC1iYXNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neC1zbGF0ZS9jb3JlLyIsInNvdXJjZXMiOlsiY29yZS9yZW5kZXItcGx1Z2luL3BsdWdpbi1jb21wb25lbnQtYmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxnQkFBZ0IsRUFBaUIsVUFBVSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6RyxPQUFPLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBUSxNQUFNLE9BQU8sQ0FBQztBQUU1QyxNQUFNLE9BQU8sc0JBQXNCO0lBK0IvQixZQUFtQixVQUFzQjtRQUF0QixlQUFVLEdBQVYsVUFBVSxDQUFZO0lBQ3pDLENBQUM7SUFFRCxtQkFBbUI7UUFDZixJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztRQUMxQixJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzNFLENBQUM7SUFFRCxPQUFPLENBQUMsR0FBRztRQUNQLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFRCxZQUFZLENBQUMsT0FBc0I7UUFDL0IsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztRQUMxQixJQUFJLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDN0IsT0FBTyxJQUFJLENBQUM7U0FDZjtRQUNELE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7SUFFRCxlQUFlLENBQUMsUUFBb0M7UUFDaEQsS0FBSyxNQUFNLEdBQUcsSUFBSSxRQUFRLEVBQUU7WUFDeEIsSUFBSSxRQUFRLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUM5QixNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQzVCLE1BQU0sU0FBUyxHQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBNkIsQ0FBQyxTQUFTLENBQUM7Z0JBQzNFLElBQUksS0FBSyxFQUFFO29CQUNQLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFO3dCQUMxQixTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO3FCQUN0QjtpQkFDSjtxQkFBTTtvQkFDSCxJQUFJLFNBQVMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUU7d0JBQ3pCLFNBQVMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7cUJBQ3pCO2lCQUNKO2FBQ0o7U0FDSjtJQUNMLENBQUM7SUFFRCxpQkFBaUIsQ0FBQyxHQUFnQixFQUFFLFVBQXFDO1FBQ3JFLEtBQUssTUFBTSxHQUFHLElBQUksVUFBVSxFQUFFO1lBQzFCLElBQUksVUFBVSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDaEMsR0FBRyxDQUFDLFlBQVksQ0FBQyxHQUFHLEVBQUUsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7YUFDMUM7U0FDSjtJQUNMLENBQUM7SUFFTyxrQkFBa0I7UUFDdEIsSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFO1lBQ3RCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDekMsS0FBSyxNQUFNLE9BQU8sSUFBSSxRQUFRLEVBQUU7Z0JBQzVCLElBQUksQ0FBQyxlQUFlLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDcEU7U0FDSjtJQUNMLENBQUM7SUFFRCxVQUFVLENBQUMsS0FBSztRQUNaLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN2QixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDL0QsSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xFLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDWixTQUFTLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUM3RDtRQUNELElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQy9DLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDL0MsQ0FBQzs7O3FCQTlGQSxLQUFLO21CQUdMLEtBQUs7cUJBR0wsS0FBSzt3QkFHTCxLQUFLO3lCQUdMLEtBQUs7dUJBR0wsS0FBSzt1QkFHTCxLQUFLO3lCQUdMLEtBQUs7bUNBR0wsS0FBSzs4QkFHTCxTQUFTLFNBQUMsaUJBQWlCLEVBQUUsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWaWV3Q2hpbGQsIElucHV0LCBWaWV3Q29udGFpbmVyUmVmLCBTaW1wbGVDaGFuZ2VzLCBFbGVtZW50UmVmLCBRdWVyeUxpc3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEVkaXRvciwgQmxvY2ssIE5vZGUgfSBmcm9tICdzbGF0ZSc7XG5cbmV4cG9ydCBjbGFzcyBTbGFQbHVnaW5Db21wb25lbnRCYXNlIHtcbiAgICBASW5wdXQoKVxuICAgIGVkaXRvcjogRWRpdG9yO1xuXG4gICAgQElucHV0KClcbiAgICBub2RlOiBCbG9jaztcblxuICAgIEBJbnB1dCgpXG4gICAgcGFyZW50OiBOb2RlO1xuXG4gICAgQElucHV0KClcbiAgICBpc0ZvY3VzZWQ6IGJvb2xlYW47XG5cbiAgICBASW5wdXQoKVxuICAgIGlzU2VsZWN0ZWQ6IGJvb2xlYW47XG5cbiAgICBASW5wdXQoKVxuICAgIHJlYWRPbmx5OiBib29sZWFuO1xuXG4gICAgQElucHV0KClcbiAgICBjaGlsZHJlbjogUXVlcnlMaXN0PGFueT47XG5cbiAgICBASW5wdXQoKVxuICAgIGF0dHJpYnV0ZXM6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH07XG5cbiAgICBASW5wdXQoKVxuICAgIG5vZGVWaWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmO1xuXG4gICAgQFZpZXdDaGlsZCgnY2hpbGRyZW5Db250ZW50JywgeyByZWFkOiBFbGVtZW50UmVmLCBzdGF0aWM6IHRydWUgfSlcbiAgICBjaGlsZHJlbkNvbnRlbnQ6IEVsZW1lbnRSZWY7XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgZWxlbWVudFJlZjogRWxlbWVudFJlZikge1xuICAgIH1cblxuICAgIGluaXRQbHVnaW5Db21wb25lbnQoKSB7XG4gICAgICAgIHRoaXMuaW5zZXJ0Q2hpbGRyZW5WaWV3KCk7XG4gICAgICAgIHRoaXMuc2V0Tm9kZUF0dHJpYnV0ZXModGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsIHRoaXMuYXR0cmlidXRlcyk7XG4gICAgfVxuXG4gICAgZ2V0RGF0YShrZXkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubm9kZS5kYXRhLmdldChrZXkpO1xuICAgIH1cblxuICAgIGlzTm9kZUNoYW5nZShjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IG5vZGUgPSBjaGFuZ2VzLm5vZGU7XG4gICAgICAgIGlmIChub2RlICYmICFub2RlLmlzRmlyc3RDaGFuZ2UpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB1cGRhdGVIb3N0Q2xhc3MoY2xhc3NNYXA6IHsgW2tleTogc3RyaW5nXTogYm9vbGVhbiB9KSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGNsYXNzTWFwKSB7XG4gICAgICAgICAgICBpZiAoY2xhc3NNYXAuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gY2xhc3NNYXBba2V5XTtcbiAgICAgICAgICAgICAgICBjb25zdCBjbGFzc0xpc3QgPSAodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQgYXMgSFRNTEVsZW1lbnQpLmNsYXNzTGlzdDtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjbGFzc0xpc3QuY29udGFpbnMoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NMaXN0LmFkZChrZXkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNsYXNzTGlzdC5jb250YWlucyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc0xpc3QucmVtb3ZlKGtleSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXROb2RlQXR0cmlidXRlcyhlbGU6IEhUTUxFbGVtZW50LCBhdHRyaWJ1dGVzOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9KSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgIGlmIChhdHRyaWJ1dGVzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICBlbGUuc2V0QXR0cmlidXRlKGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgaW5zZXJ0Q2hpbGRyZW5WaWV3KCkge1xuICAgICAgICBpZiAodGhpcy5jaGlsZHJlbkNvbnRlbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IG5vZGVSZWZzID0gdGhpcy5jaGlsZHJlbi50b0FycmF5KCk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IG5vZGVSZWYgb2Ygbm9kZVJlZnMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNoaWxkcmVuQ29udGVudC5uYXRpdmVFbGVtZW50LmFwcGVuZENoaWxkKG5vZGVSZWYucm9vdE5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVtb3ZlTm9kZShldmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBjb25zdCBwYXRoID0gdGhpcy5lZGl0b3IudmFsdWUuZG9jdW1lbnQuZ2V0UGF0aCh0aGlzLm5vZGUua2V5KTtcbiAgICAgICAgbGV0IGZvY3VzTm9kZSA9IHRoaXMuZWRpdG9yLnZhbHVlLmRvY3VtZW50LmdldFByZXZpb3VzQmxvY2socGF0aCk7XG4gICAgICAgIGlmICghZm9jdXNOb2RlKSB7XG4gICAgICAgICAgICBmb2N1c05vZGUgPSB0aGlzLmVkaXRvci52YWx1ZS5kb2N1bWVudC5nZXROZXh0QmxvY2socGF0aCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lZGl0b3IuZm9jdXMoKS5tb3ZlVG9FbmRPZk5vZGUoZm9jdXNOb2RlKTtcbiAgICAgICAgdGhpcy5lZGl0b3IucmVtb3ZlTm9kZUJ5S2V5KHRoaXMubm9kZS5rZXkpO1xuICAgIH1cbn1cbiJdfQ==