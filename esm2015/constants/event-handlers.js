const EVENT_HANDLERS = [
    'onBeforeInput',
    'onBlur',
    'onClick',
    'onContextMenu',
    'onCompositionEnd',
    'onCompositionStart',
    'onCopy',
    'onCut',
    'onDragEnd',
    'onDragEnter',
    'onDragExit',
    'onDragLeave',
    'onDragOver',
    'onDragStart',
    'onDrop',
    'onInput',
    'onFocus',
    'onKeyDown',
    'onKeyUp',
    'onMouseDown',
    'onMouseUp',
    'onPaste',
    'onSelect'
];
export class NgxSlateEvent {
}
export const NGX_SLATE_EVENTS = [
    { name: 'blur', handler: 'onBlur', isTriggerBeforeInput: true },
    { name: 'compositionstart', handler: 'onCompositionStart', isTriggerBeforeInput: true },
    { name: 'compositionupdate', handler: null, isTriggerBeforeInput: true },
    { name: 'compositionend', handler: 'onCompositionEnd', isTriggerBeforeInput: true },
    { name: 'keydown', handler: 'onKeyDown', isTriggerBeforeInput: true },
    { name: 'keypress', handler: null, isTriggerBeforeInput: true },
    { name: 'keyup', handler: 'onKeyUp', isTriggerBeforeInput: true },
    { name: 'mousedown', handler: 'onMouseDown', isTriggerBeforeInput: true },
    { name: 'textInput', handler: null, isTriggerBeforeInput: true },
    { name: 'paste', handler: 'onPaste', isTriggerBeforeInput: true },
    { name: 'click', handler: 'onClick', isTriggerBeforeInput: false },
    { name: 'contextmenu', handler: 'onContextMenu', isTriggerBeforeInput: false },
    { name: 'copy', handler: 'onCopy', isTriggerBeforeInput: false },
    { name: 'cut', handler: 'onCut', isTriggerBeforeInput: false },
    // { name: 'input', handler: 'onInput', isTriggerBeforeInput: false },
    { name: 'focus', handler: 'onFocus', isTriggerBeforeInput: false },
    { name: 'cut', handler: 'onCut', isTriggerBeforeInput: false },
    { name: 'mouseup', handler: 'onMouseUp', isTriggerBeforeInput: false },
    { name: 'select', handler: 'onSelect', isTriggerBeforeInput: false },
    { name: 'drop', handler: 'onDrop', isTriggerBeforeInput: false }
];
/**
 * Export.
 *
 * @type {Array}
 */
export default EVENT_HANDLERS;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQtaGFuZGxlcnMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LXNsYXRlL2NvcmUvIiwic291cmNlcyI6WyJjb25zdGFudHMvZXZlbnQtaGFuZGxlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxjQUFjLEdBQUc7SUFDbkIsZUFBZTtJQUNmLFFBQVE7SUFDUixTQUFTO0lBQ1QsZUFBZTtJQUNmLGtCQUFrQjtJQUNsQixvQkFBb0I7SUFDcEIsUUFBUTtJQUNSLE9BQU87SUFDUCxXQUFXO0lBQ1gsYUFBYTtJQUNiLFlBQVk7SUFDWixhQUFhO0lBQ2IsWUFBWTtJQUNaLGFBQWE7SUFDYixRQUFRO0lBQ1IsU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULGFBQWE7SUFDYixXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7Q0FDYixDQUFDO0FBRUYsTUFBTSxPQUFPLGFBQWE7Q0FJekI7QUFFRCxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBb0I7SUFDN0MsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsb0JBQW9CLEVBQUUsSUFBSSxFQUFFO0lBQy9ELEVBQUUsSUFBSSxFQUFFLGtCQUFrQixFQUFFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxvQkFBb0IsRUFBRSxJQUFJLEVBQUU7SUFDdkYsRUFBRSxJQUFJLEVBQUUsbUJBQW1CLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxvQkFBb0IsRUFBRSxJQUFJLEVBQUU7SUFDeEUsRUFBRSxJQUFJLEVBQUUsZ0JBQWdCLEVBQUUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLG9CQUFvQixFQUFFLElBQUksRUFBRTtJQUNuRixFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxvQkFBb0IsRUFBRSxJQUFJLEVBQUU7SUFDckUsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsb0JBQW9CLEVBQUUsSUFBSSxFQUFFO0lBQy9ELEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLG9CQUFvQixFQUFFLElBQUksRUFBRTtJQUNqRSxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxvQkFBb0IsRUFBRSxJQUFJLEVBQUU7SUFDekUsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsb0JBQW9CLEVBQUUsSUFBSSxFQUFFO0lBQ2hFLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLG9CQUFvQixFQUFFLElBQUksRUFBRTtJQUNqRSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxvQkFBb0IsRUFBRSxLQUFLLEVBQUU7SUFDbEUsRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFLE9BQU8sRUFBRSxlQUFlLEVBQUUsb0JBQW9CLEVBQUUsS0FBSyxFQUFFO0lBQzlFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLG9CQUFvQixFQUFFLEtBQUssRUFBRTtJQUNoRSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxLQUFLLEVBQUU7SUFDOUQsc0VBQXNFO0lBQ3RFLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLG9CQUFvQixFQUFFLEtBQUssRUFBRTtJQUNsRSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxLQUFLLEVBQUU7SUFDOUQsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsb0JBQW9CLEVBQUUsS0FBSyxFQUFFO0lBQ3RFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLG9CQUFvQixFQUFFLEtBQUssRUFBRTtJQUNwRSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxvQkFBb0IsRUFBRSxLQUFLLEVBQUU7Q0FDbkUsQ0FBQztBQUNGOzs7O0dBSUc7QUFFSCxlQUFlLGNBQWMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEVWRU5UX0hBTkRMRVJTID0gW1xuICAgICdvbkJlZm9yZUlucHV0JyxcbiAgICAnb25CbHVyJyxcbiAgICAnb25DbGljaycsXG4gICAgJ29uQ29udGV4dE1lbnUnLFxuICAgICdvbkNvbXBvc2l0aW9uRW5kJyxcbiAgICAnb25Db21wb3NpdGlvblN0YXJ0JyxcbiAgICAnb25Db3B5JyxcbiAgICAnb25DdXQnLFxuICAgICdvbkRyYWdFbmQnLFxuICAgICdvbkRyYWdFbnRlcicsXG4gICAgJ29uRHJhZ0V4aXQnLFxuICAgICdvbkRyYWdMZWF2ZScsXG4gICAgJ29uRHJhZ092ZXInLFxuICAgICdvbkRyYWdTdGFydCcsXG4gICAgJ29uRHJvcCcsXG4gICAgJ29uSW5wdXQnLFxuICAgICdvbkZvY3VzJyxcbiAgICAnb25LZXlEb3duJyxcbiAgICAnb25LZXlVcCcsXG4gICAgJ29uTW91c2VEb3duJyxcbiAgICAnb25Nb3VzZVVwJyxcbiAgICAnb25QYXN0ZScsXG4gICAgJ29uU2VsZWN0J1xuXTtcblxuZXhwb3J0IGNsYXNzIE5neFNsYXRlRXZlbnQge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBoYW5kbGVyOiBzdHJpbmc7XG4gICAgaXNUcmlnZ2VyQmVmb3JlSW5wdXQ6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBjb25zdCBOR1hfU0xBVEVfRVZFTlRTOiBOZ3hTbGF0ZUV2ZW50W10gPSBbXG4gICAgeyBuYW1lOiAnYmx1cicsIGhhbmRsZXI6ICdvbkJsdXInLCBpc1RyaWdnZXJCZWZvcmVJbnB1dDogdHJ1ZSB9LFxuICAgIHsgbmFtZTogJ2NvbXBvc2l0aW9uc3RhcnQnLCBoYW5kbGVyOiAnb25Db21wb3NpdGlvblN0YXJ0JywgaXNUcmlnZ2VyQmVmb3JlSW5wdXQ6IHRydWUgfSxcbiAgICB7IG5hbWU6ICdjb21wb3NpdGlvbnVwZGF0ZScsIGhhbmRsZXI6IG51bGwsIGlzVHJpZ2dlckJlZm9yZUlucHV0OiB0cnVlIH0sXG4gICAgeyBuYW1lOiAnY29tcG9zaXRpb25lbmQnLCBoYW5kbGVyOiAnb25Db21wb3NpdGlvbkVuZCcsIGlzVHJpZ2dlckJlZm9yZUlucHV0OiB0cnVlIH0sXG4gICAgeyBuYW1lOiAna2V5ZG93bicsIGhhbmRsZXI6ICdvbktleURvd24nLCBpc1RyaWdnZXJCZWZvcmVJbnB1dDogdHJ1ZSB9LFxuICAgIHsgbmFtZTogJ2tleXByZXNzJywgaGFuZGxlcjogbnVsbCwgaXNUcmlnZ2VyQmVmb3JlSW5wdXQ6IHRydWUgfSxcbiAgICB7IG5hbWU6ICdrZXl1cCcsIGhhbmRsZXI6ICdvbktleVVwJywgaXNUcmlnZ2VyQmVmb3JlSW5wdXQ6IHRydWUgfSxcbiAgICB7IG5hbWU6ICdtb3VzZWRvd24nLCBoYW5kbGVyOiAnb25Nb3VzZURvd24nLCBpc1RyaWdnZXJCZWZvcmVJbnB1dDogdHJ1ZSB9LFxuICAgIHsgbmFtZTogJ3RleHRJbnB1dCcsIGhhbmRsZXI6IG51bGwsIGlzVHJpZ2dlckJlZm9yZUlucHV0OiB0cnVlIH0sXG4gICAgeyBuYW1lOiAncGFzdGUnLCBoYW5kbGVyOiAnb25QYXN0ZScsIGlzVHJpZ2dlckJlZm9yZUlucHV0OiB0cnVlIH0sXG4gICAgeyBuYW1lOiAnY2xpY2snLCBoYW5kbGVyOiAnb25DbGljaycsIGlzVHJpZ2dlckJlZm9yZUlucHV0OiBmYWxzZSB9LFxuICAgIHsgbmFtZTogJ2NvbnRleHRtZW51JywgaGFuZGxlcjogJ29uQ29udGV4dE1lbnUnLCBpc1RyaWdnZXJCZWZvcmVJbnB1dDogZmFsc2UgfSxcbiAgICB7IG5hbWU6ICdjb3B5JywgaGFuZGxlcjogJ29uQ29weScsIGlzVHJpZ2dlckJlZm9yZUlucHV0OiBmYWxzZSB9LFxuICAgIHsgbmFtZTogJ2N1dCcsIGhhbmRsZXI6ICdvbkN1dCcsIGlzVHJpZ2dlckJlZm9yZUlucHV0OiBmYWxzZSB9LFxuICAgIC8vIHsgbmFtZTogJ2lucHV0JywgaGFuZGxlcjogJ29uSW5wdXQnLCBpc1RyaWdnZXJCZWZvcmVJbnB1dDogZmFsc2UgfSxcbiAgICB7IG5hbWU6ICdmb2N1cycsIGhhbmRsZXI6ICdvbkZvY3VzJywgaXNUcmlnZ2VyQmVmb3JlSW5wdXQ6IGZhbHNlIH0sXG4gICAgeyBuYW1lOiAnY3V0JywgaGFuZGxlcjogJ29uQ3V0JywgaXNUcmlnZ2VyQmVmb3JlSW5wdXQ6IGZhbHNlIH0sXG4gICAgeyBuYW1lOiAnbW91c2V1cCcsIGhhbmRsZXI6ICdvbk1vdXNlVXAnLCBpc1RyaWdnZXJCZWZvcmVJbnB1dDogZmFsc2UgfSxcbiAgICB7IG5hbWU6ICdzZWxlY3QnLCBoYW5kbGVyOiAnb25TZWxlY3QnLCBpc1RyaWdnZXJCZWZvcmVJbnB1dDogZmFsc2UgfSxcbiAgICB7IG5hbWU6ICdkcm9wJywgaGFuZGxlcjogJ29uRHJvcCcsIGlzVHJpZ2dlckJlZm9yZUlucHV0OiBmYWxzZSB9XG5dO1xuLyoqXG4gKiBFeHBvcnQuXG4gKlxuICogQHR5cGUge0FycmF5fVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IEVWRU5UX0hBTkRMRVJTO1xuIl19