import { Component, Input, ElementRef, ViewContainerRef, ChangeDetectionStrategy, QueryList, ViewChildren, forwardRef, IterableDiffers, NgZone } from '@angular/core';
import { Selection, PathUtils, Editor, Block } from 'slate';
import { SlaNestedNodeRef } from '../../core/render-plugin/render-config';
import DATA_ATTRS from '../../constants/data-attributes';
import Debug from 'debug';
import { ChildNodeBase } from '../../core/child-node-base';
import warning from 'tiny-warning';
import { SlaVoidComponent } from '../void/void.component';
import { SlaPluginRenderService } from '../../core/render-plugin/plugin-render-service';
const debug = Debug('slate:node');
debug.render = Debug('slate:node-render');
debug.check = Debug('slate:docheck');
debug.change = Debug('slate:change');
export const nodeBinding = {
    provide: ChildNodeBase,
    useExisting: forwardRef(() => SlaNodeComponent)
};
export class SlaNodeComponent extends ChildNodeBase {
    constructor(viewContainerRef, elementRef, slaPluginRenderService, ngZone, differs) {
        super();
        this.viewContainerRef = viewContainerRef;
        this.elementRef = elementRef;
        this.slaPluginRenderService = slaPluginRenderService;
        this.ngZone = ngZone;
        this.differs = differs;
        this.subSelections = [];
        this.readOnly = false;
        this.rendered = true;
    }
    set node(value) {
        debug('set: node', value.toJSON());
        const oldNode = this.internalNode || value;
        this.internalNode = value;
        if (this.nodeComponentRef) {
            this.ngZone.run(() => {
                this.nodeComponentRef.componentRef.instance.node = this.internalNode;
                this.nodeComponentRef.componentRef.changeDetectorRef.detectChanges();
            });
        }
        else {
            if (!this.internalNode.data.equals(oldNode.data)) {
                this.render();
            }
        }
    }
    get node() {
        return this.internalNode;
    }
    ngOnInit() {
        debug(`ngOnInit node`, this.node.toJSON());
        this.rootNode = this.elementRef.nativeElement;
    }
    ngAfterViewInit() {
        this.render();
        this.differ = this.differs.find(this.nodeRefs).create((index, item) => {
            return item.rootNode;
        });
        this.differ.diff(this.nodeRefs);
        this.nodeRefs.changes.subscribe(() => {
            const iterableChanges = this.differ.diff(this.nodeRefs);
            if (iterableChanges) {
                iterableChanges.forEachAddedItem((record) => {
                    const rootNode = record.item.rootNode;
                    let childrenContent;
                    if (this.nodeComponentRef) {
                        childrenContent = this.nodeComponentRef.componentRef.instance.childrenContent.nativeElement;
                    }
                    else {
                        childrenContent = this.rootNode;
                    }
                    const childNodes = Array.from(childrenContent.childNodes).filter((node) => node.hasAttribute('data-slate-object') || node.hasAttribute('data-slate-void'));
                    const nextNode = childNodes[record.currentIndex];
                    if (nextNode) {
                        childrenContent.insertBefore(rootNode, nextNode);
                    }
                    else {
                        childrenContent.appendChild(rootNode);
                    }
                });
            }
        });
    }
    ngAfterViewChecked() { }
    getRelativeRange(node, index, range) {
        if (range.isUnset) {
            return null;
        }
        const child = node.nodes.get(index);
        let { start, end } = range;
        const { path: startPath } = start;
        const { path: endPath } = end;
        const startIndex = startPath.first();
        const endIndex = endPath.first();
        if (startIndex === index) {
            start = start.setPath(startPath.rest());
        }
        else if (startIndex < index && index <= endIndex) {
            if (child.object === 'text') {
                start = start.moveTo(PathUtils.create([index]), 0).setKey(child.key);
            }
            else {
                const [first] = child.texts();
                const [firstNode, firstPath] = first;
                start = start.moveTo(firstPath, 0).setKey(firstNode.key);
            }
        }
        else {
            start = null;
        }
        if (endIndex === index) {
            end = end.setPath(endPath.rest());
        }
        else if (startIndex <= index && index < endIndex) {
            if (child.object === 'text') {
                const length = child.text.length;
                end = end.moveTo(PathUtils.create([index]), length).setKey(child.key);
            }
            else {
                const [last] = child.texts({ direction: 'backward' });
                const [lastNode, lastPath] = last;
                end = end.moveTo(lastPath, lastNode.text.length).setKey(lastNode.key);
            }
        }
        else {
            end = null;
        }
        if (!start || !end) {
            return null;
        }
        range = range.setAnchor(start);
        range = range.setFocus(end);
        return range;
    }
    trackBy(index, node) {
        return `${node.key}_${node.type}`;
    }
    render() {
        debug.render('exec render', this.node.toJSON());
        let pluginRender;
        if (this.node.object === 'block') {
            pluginRender = 'renderBlock';
        }
        else if (this.node.object === 'document') {
            pluginRender = 'renderDocument';
        }
        else if (this.node.object === 'inline') {
            pluginRender = 'renderInline';
        }
        const config = {
            editor: this.editor,
            isFocused: !!this.selection && this.selection.isFocused,
            isSelected: !!this.selection,
            node: this.node,
            parent: null,
            readOnly: this.readOnly,
            children: this.nodeRefs,
            attributes: {
                [DATA_ATTRS.OBJECT]: this.node.object,
                [DATA_ATTRS.KEY]: this.node.key
            },
            nodeViewContainerRef: this.viewContainerRef
        };
        const renderResult = this.editor.run(pluginRender, config);
        let renderDom = null;
        if (renderResult instanceof SlaNestedNodeRef) {
            this.nodeComponentRef = renderResult;
            renderDom = this.nodeComponentRef.rootNode;
        }
        else {
            renderDom = renderResult;
        }
        if (this.editor.isVoid(this.node)) {
            config.children = renderDom;
            const voidRootNode = this.slaPluginRenderService.renderComponent(SlaVoidComponent, Object.assign(config, { nodeRefs: this.nodeRefs })).rootNode;
            this.rootNode.replaceWith(voidRootNode);
            this.rootNode = voidRootNode;
        }
        else {
            this.rootNode.replaceWith(renderDom);
            this.rootNode = renderDom;
        }
    }
    getNodeRef(index) {
        if (!this.nodeRefs) {
            warning(false, 'nodeRefs is undefined.');
            return null;
        }
        return this.nodeRefs.find((item, i, array) => i === index);
    }
    ngOnChanges(simpleChanges) {
        if (simpleChanges.node || simpleChanges.decorations || simpleChanges.annotations || simpleChanges.selection) {
            this.memoSubNodes();
        }
        debug.change(`node changes`, simpleChanges);
        const selectionChange = simpleChanges.selection;
        if (selectionChange && !selectionChange.firstChange) {
            if (this.nodeComponentRef) {
                const isFocused = !!this.selection && this.selection.isFocused;
                if (isFocused !== this.nodeComponentRef.componentRef.instance.isFocused) {
                    this.ngZone.run(() => {
                        this.nodeComponentRef.componentRef.instance.isFocused = isFocused;
                        this.nodeComponentRef.componentRef.changeDetectorRef.detectChanges();
                    });
                }
            }
        }
    }
    ngDoCheck() {
        debug.check('check node');
    }
    ngOnDestroy() {
        debug(`ngOnDestroy node`);
        this.rootNode.remove();
    }
    memoSubNodes() {
        for (let i = 0; i < this.node.nodes.size; i++) {
            const selection = this.selection && this.getRelativeRange(this.node, i, this.selection);
            if (!(selection && selection.equals(this.subSelections[i]))) {
                this.subSelections[i] = selection;
            }
        }
    }
}
SlaNodeComponent.decorators = [
    { type: Component, args: [{
                selector: 'sla-node,[slaNode]',
                template: "<ng-container *ngFor=\"let child of node.nodes; let i = index; trackBy: trackBy\">\n    <span\n        *ngIf=\"child.object === 'text'\"\n        slaText\n        [attr.data-slate-object]=\"child.object\"\n        [slaTextNode]=\"child\"\n        [parent]=\"node\"\n        [editor]=\"editor\"\n        [attr.data-key]=\"child.key\"\n    ></span>\n    <div\n        *ngIf=\"child.object !== 'text'\"\n        slaNode\n        [node]=\"child\"\n        [selection]=\"subSelections[i]\"\n        [editor]=\"editor\"\n        [readOnly]=\"readOnly\"\n    ></div>\n</ng-container>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [nodeBinding]
            }] }
];
/** @nocollapse */
SlaNodeComponent.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: ElementRef },
    { type: SlaPluginRenderService },
    { type: NgZone },
    { type: IterableDiffers }
];
SlaNodeComponent.propDecorators = {
    editor: [{ type: Input }],
    selection: [{ type: Input }],
    block: [{ type: Input }],
    index: [{ type: Input }],
    nodeRef: [{ type: Input }],
    readOnly: [{ type: Input }],
    node: [{ type: Input }],
    nodeRefs: [{ type: ViewChildren, args: [ChildNodeBase,] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LXNsYXRlL2NvcmUvIiwic291cmNlcyI6WyJjb21wb25lbnRzL25vZGUvbm9kZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNILFNBQVMsRUFDVCxLQUFLLEVBS0wsVUFBVSxFQUVWLGdCQUFnQixFQUNoQix1QkFBdUIsRUFFdkIsU0FBUyxFQUNULFlBQVksRUFDWixVQUFVLEVBSVYsZUFBZSxFQUlmLE1BQU0sRUFFVCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQVksU0FBUyxFQUFFLFNBQVMsRUFBUSxNQUFNLEVBQUUsS0FBSyxFQUF3QyxNQUFNLE9BQU8sQ0FBQztBQUVsSCxPQUFPLEVBQXVCLGdCQUFnQixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDL0YsT0FBTyxVQUFVLE1BQU0saUNBQWlDLENBQUM7QUFDekQsT0FBTyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQzFCLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUMzRCxPQUFPLE9BQU8sTUFBTSxjQUFjLENBQUM7QUFDbkMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDMUQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sZ0RBQWdELENBQUM7QUFFeEYsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ2xDLEtBQUssQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFDMUMsS0FBSyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDckMsS0FBSyxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUM7QUFFckMsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFRO0lBQzVCLE9BQU8sRUFBRSxhQUFhO0lBQ3RCLFdBQVcsRUFBRSxV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O1lBQ3hGLElBQUksQ0FBQyxDQUFDLFNBQVMsSUFBSSxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUN6RCxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQzthQUNyQztTQUNKO0lBQ0wsQ0FBQzs7O1lBOVBKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsb0JBQW9CO2dCQUM5Qiw4a0JBQW9DO2dCQUNwQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFDL0MsU0FBUyxFQUFFLENBQUMsV0FBVyxDQUFDO2FBQzNCOzs7O1lBekNHLGdCQUFnQjtZQUZoQixVQUFVO1lBMEJMLHNCQUFzQjtZQVgzQixNQUFNO1lBSk4sZUFBZTs7O3FCQTRDZCxLQUFLO3dCQUdMLEtBQUs7b0JBR0wsS0FBSztvQkFHTCxLQUFLO3NCQUdMLEtBQUs7dUJBR0wsS0FBSzttQkFLTCxLQUFLO3VCQXFCTCxZQUFZLFNBQUMsYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ29tcG9uZW50LFxuICAgIElucHV0LFxuICAgIFNpbXBsZUNoYW5nZXMsXG4gICAgVmlld0NoaWxkLFxuICAgIE9uQ2hhbmdlcyxcbiAgICBPbkluaXQsXG4gICAgRWxlbWVudFJlZixcbiAgICBUZW1wbGF0ZVJlZixcbiAgICBWaWV3Q29udGFpbmVyUmVmLFxuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICAgIE9uRGVzdHJveSxcbiAgICBRdWVyeUxpc3QsXG4gICAgVmlld0NoaWxkcmVuLFxuICAgIGZvcndhcmRSZWYsXG4gICAgRG9DaGVjayxcbiAgICBBZnRlclZpZXdJbml0LFxuICAgIEFmdGVyVmlld0NoZWNrZWQsXG4gICAgSXRlcmFibGVEaWZmZXJzLFxuICAgIEl0ZXJhYmxlRGlmZmVyLFxuICAgIEl0ZXJhYmxlQ2hhbmdlUmVjb3JkLFxuICAgIE5nSXRlcmFibGUsXG4gICAgTmdab25lLFxuICAgIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERvY3VtZW50LCBTZWxlY3Rpb24sIFBhdGhVdGlscywgTm9kZSwgRWRpdG9yLCBCbG9jaywgSW5saW5lLCBEZWNvcmF0aW9uLCBBbm5vdGF0aW9uLCBUZXh0IH0gZnJvbSAnc2xhdGUnO1xuaW1wb3J0IHsgTGlzdCwgTWFwIH0gZnJvbSAnaW1tdXRhYmxlJztcbmltcG9ydCB7IFNsYU5vZGVSZW5kZXJDb25maWcsIFNsYU5lc3RlZE5vZGVSZWYgfSBmcm9tICcuLi8uLi9jb3JlL3JlbmRlci1wbHVnaW4vcmVuZGVyLWNvbmZpZyc7XG5pbXBvcnQgREFUQV9BVFRSUyBmcm9tICcuLi8uLi9jb25zdGFudHMvZGF0YS1hdHRyaWJ1dGVzJztcbmltcG9ydCBEZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgeyBDaGlsZE5vZGVCYXNlIH0gZnJvbSAnLi4vLi4vY29yZS9jaGlsZC1ub2RlLWJhc2UnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCB7IFNsYVZvaWRDb21wb25lbnQgfSBmcm9tICcuLi92b2lkL3ZvaWQuY29tcG9uZW50JztcbmltcG9ydCB7IFNsYVBsdWdpblJlbmRlclNlcnZpY2UgfSBmcm9tICcuLi8uLi9jb3JlL3JlbmRlci1wbHVnaW4vcGx1Z2luLXJlbmRlci1zZXJ2aWNlJztcblxuY29uc3QgZGVidWcgPSBEZWJ1Zygnc2xhdGU6bm9kZScpO1xuZGVidWcucmVuZGVyID0gRGVidWcoJ3NsYXRlOm5vZGUtcmVuZGVyJyk7XG5kZWJ1Zy5jaGVjayA9IERlYnVnKCdzbGF0ZTpkb2NoZWNrJyk7XG5kZWJ1Zy5jaGFuZ2UgPSBEZWJ1Zygnc2xhdGU6Y2hhbmdlJyk7XG5cbmV4cG9ydCBjb25zdCBub2RlQmluZGluZzogYW55ID0ge1xuICAgIHByb3ZpZGU6IENoaWxkTm9kZUJhc2UsXG4gICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gU2xhTm9kZUNvbXBvbmVudClcbn07XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnc2xhLW5vZGUsW3NsYU5vZGVdJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vbm9kZS5jb21wb25lbnQuaHRtbCcsXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gICAgcHJvdmlkZXJzOiBbbm9kZUJpbmRpbmddXG59KVxuZXhwb3J0IGNsYXNzIFNsYU5vZGVDb21wb25lbnQgZXh0ZW5kcyBDaGlsZE5vZGVCYXNlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3ksIE9uQ2hhbmdlcywgQWZ0ZXJWaWV3SW5pdCwgRG9DaGVjaywgQWZ0ZXJWaWV3Q2hlY2tlZCB7XG4gICAgaW50ZXJuYWxOb2RlOiBCbG9jayB8IERvY3VtZW50IHwgSW5saW5lO1xuXG4gICAgZGVzY2VuZGFudFJvb3ROb2RlczogSFRNTEVsZW1lbnRbXTtcblxuICAgIHJvb3ROb2RlOiBIVE1MRWxlbWVudDtcblxuICAgIG5vZGVDb21wb25lbnRSZWY6IFNsYU5lc3RlZE5vZGVSZWY7XG5cbiAgICBzdWJTZWxlY3Rpb25zID0gW107XG5cbiAgICBASW5wdXQoKVxuICAgIGVkaXRvcjogRWRpdG9yO1xuXG4gICAgQElucHV0KClcbiAgICBzZWxlY3Rpb246IFNlbGVjdGlvbjtcblxuICAgIEBJbnB1dCgpXG4gICAgYmxvY2s6IEJsb2NrO1xuXG4gICAgQElucHV0KClcbiAgICBpbmRleDogbnVtYmVyO1xuXG4gICAgQElucHV0KClcbiAgICBub2RlUmVmOiAobm9kZVJlZjogYW55KSA9PiB7fTtcblxuICAgIEBJbnB1dCgpXG4gICAgcmVhZE9ubHkgPSBmYWxzZTtcblxuICAgIHJlbmRlcmVkID0gdHJ1ZTtcblxuICAgIEBJbnB1dCgpXG4gICAgc2V0IG5vZGUodmFsdWU6IEJsb2NrIHwgSW5saW5lIHwgRG9jdW1lbnQpIHtcbiAgICAgICAgZGVidWcoJ3NldDogbm9kZScsIHZhbHVlLnRvSlNPTigpKTtcbiAgICAgICAgY29uc3Qgb2xkTm9kZSA9IHRoaXMuaW50ZXJuYWxOb2RlIHx8IHZhbHVlO1xuICAgICAgICB0aGlzLmludGVybmFsTm9kZSA9IHZhbHVlO1xuICAgICAgICBpZiAodGhpcy5ub2RlQ29tcG9uZW50UmVmKSB7XG4gICAgICAgICAgICB0aGlzLm5nWm9uZS5ydW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMubm9kZUNvbXBvbmVudFJlZi5jb21wb25lbnRSZWYuaW5zdGFuY2Uubm9kZSA9IHRoaXMuaW50ZXJuYWxOb2RlO1xuICAgICAgICAgICAgICAgIHRoaXMubm9kZUNvbXBvbmVudFJlZi5jb21wb25lbnRSZWYuY2hhbmdlRGV0ZWN0b3JSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaW50ZXJuYWxOb2RlLmRhdGEuZXF1YWxzKG9sZE5vZGUuZGF0YSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0IG5vZGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmludGVybmFsTm9kZTtcbiAgICB9XG5cbiAgICBAVmlld0NoaWxkcmVuKENoaWxkTm9kZUJhc2UpXG4gICAgbm9kZVJlZnM6IFF1ZXJ5TGlzdDxDaGlsZE5vZGVCYXNlPjtcblxuICAgIGRpZmZlcjogSXRlcmFibGVEaWZmZXI8Q2hpbGROb2RlQmFzZT47XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgICAgICBwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY8YW55PixcbiAgICAgICAgcHJpdmF0ZSBzbGFQbHVnaW5SZW5kZXJTZXJ2aWNlOiBTbGFQbHVnaW5SZW5kZXJTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIG5nWm9uZTogTmdab25lLFxuICAgICAgICBwcml2YXRlIGRpZmZlcnM6IEl0ZXJhYmxlRGlmZmVyc1xuICAgICkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICBkZWJ1ZyhgbmdPbkluaXQgbm9kZWAsIHRoaXMubm9kZS50b0pTT04oKSk7XG4gICAgICAgIHRoaXMucm9vdE5vZGUgPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcbiAgICB9XG5cbiAgICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICAgIHRoaXMuZGlmZmVyID0gdGhpcy5kaWZmZXJzLmZpbmQodGhpcy5ub2RlUmVmcykuY3JlYXRlKChpbmRleCwgaXRlbSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGl0ZW0ucm9vdE5vZGU7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmRpZmZlci5kaWZmKHRoaXMubm9kZVJlZnMgYXMgYW55KTtcbiAgICAgICAgdGhpcy5ub2RlUmVmcy5jaGFuZ2VzLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpdGVyYWJsZUNoYW5nZXMgPSB0aGlzLmRpZmZlci5kaWZmKHRoaXMubm9kZVJlZnMgYXMgYW55KTtcbiAgICAgICAgICAgIGlmIChpdGVyYWJsZUNoYW5nZXMpIHtcbiAgICAgICAgICAgICAgICBpdGVyYWJsZUNoYW5nZXMuZm9yRWFjaEFkZGVkSXRlbSgocmVjb3JkOiBJdGVyYWJsZUNoYW5nZVJlY29yZDxDaGlsZE5vZGVCYXNlPikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByb290Tm9kZSA9IHJlY29yZC5pdGVtLnJvb3ROb2RlO1xuICAgICAgICAgICAgICAgICAgICBsZXQgY2hpbGRyZW5Db250ZW50OiBIVE1MRWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubm9kZUNvbXBvbmVudFJlZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW5Db250ZW50ID0gKHRoaXMubm9kZUNvbXBvbmVudFJlZi5jb21wb25lbnRSZWYuaW5zdGFuY2UgYXMgYW55KS5jaGlsZHJlbkNvbnRlbnQubmF0aXZlRWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuQ29udGVudCA9IHRoaXMucm9vdE5vZGU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hpbGROb2RlcyA9IEFycmF5LmZyb20oY2hpbGRyZW5Db250ZW50LmNoaWxkTm9kZXMpLmZpbHRlcigobm9kZSkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgIChub2RlIGFzIEhUTUxFbGVtZW50KS5oYXNBdHRyaWJ1dGUoJ2RhdGEtc2xhdGUtb2JqZWN0JykgfHwgKG5vZGUgYXMgSFRNTEVsZW1lbnQpLmhhc0F0dHJpYnV0ZSgnZGF0YS1zbGF0ZS12b2lkJylcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV4dE5vZGUgPSBjaGlsZE5vZGVzW3JlY29yZC5jdXJyZW50SW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV4dE5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuQ29udGVudC5pbnNlcnRCZWZvcmUocm9vdE5vZGUsIG5leHROb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuQ29udGVudC5hcHBlbmRDaGlsZChyb290Tm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgbmdBZnRlclZpZXdDaGVja2VkKCkge31cblxuICAgIGdldFJlbGF0aXZlUmFuZ2Uobm9kZSwgaW5kZXgsIHJhbmdlKSB7XG4gICAgICAgIGlmIChyYW5nZS5pc1Vuc2V0KSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNoaWxkID0gbm9kZS5ub2Rlcy5nZXQoaW5kZXgpO1xuICAgICAgICBsZXQgeyBzdGFydCwgZW5kIH0gPSByYW5nZTtcbiAgICAgICAgY29uc3QgeyBwYXRoOiBzdGFydFBhdGggfSA9IHN0YXJ0O1xuICAgICAgICBjb25zdCB7IHBhdGg6IGVuZFBhdGggfSA9IGVuZDtcbiAgICAgICAgY29uc3Qgc3RhcnRJbmRleCA9IHN0YXJ0UGF0aC5maXJzdCgpO1xuICAgICAgICBjb25zdCBlbmRJbmRleCA9IGVuZFBhdGguZmlyc3QoKTtcblxuICAgICAgICBpZiAoc3RhcnRJbmRleCA9PT0gaW5kZXgpIHtcbiAgICAgICAgICAgIHN0YXJ0ID0gc3RhcnQuc2V0UGF0aChzdGFydFBhdGgucmVzdCgpKTtcbiAgICAgICAgfSBlbHNlIGlmIChzdGFydEluZGV4IDwgaW5kZXggJiYgaW5kZXggPD0gZW5kSW5kZXgpIHtcbiAgICAgICAgICAgIGlmIChjaGlsZC5vYmplY3QgPT09ICd0ZXh0Jykge1xuICAgICAgICAgICAgICAgIHN0YXJ0ID0gc3RhcnQubW92ZVRvKFBhdGhVdGlscy5jcmVhdGUoW2luZGV4XSksIDApLnNldEtleShjaGlsZC5rZXkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBbZmlyc3RdID0gY2hpbGQudGV4dHMoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBbZmlyc3ROb2RlLCBmaXJzdFBhdGhdID0gZmlyc3Q7XG4gICAgICAgICAgICAgICAgc3RhcnQgPSBzdGFydC5tb3ZlVG8oZmlyc3RQYXRoLCAwKS5zZXRLZXkoZmlyc3ROb2RlLmtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdGFydCA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW5kSW5kZXggPT09IGluZGV4KSB7XG4gICAgICAgICAgICBlbmQgPSBlbmQuc2V0UGF0aChlbmRQYXRoLnJlc3QoKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoc3RhcnRJbmRleCA8PSBpbmRleCAmJiBpbmRleCA8IGVuZEluZGV4KSB7XG4gICAgICAgICAgICBpZiAoY2hpbGQub2JqZWN0ID09PSAndGV4dCcpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsZW5ndGggPSBjaGlsZC50ZXh0Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICBlbmQgPSBlbmQubW92ZVRvKFBhdGhVdGlscy5jcmVhdGUoW2luZGV4XSksIGxlbmd0aCkuc2V0S2V5KGNoaWxkLmtleSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IFtsYXN0XSA9IGNoaWxkLnRleHRzKHsgZGlyZWN0aW9uOiAnYmFja3dhcmQnIH0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IFtsYXN0Tm9kZSwgbGFzdFBhdGhdID0gbGFzdDtcbiAgICAgICAgICAgICAgICBlbmQgPSBlbmQubW92ZVRvKGxhc3RQYXRoLCBsYXN0Tm9kZS50ZXh0Lmxlbmd0aCkuc2V0S2V5KGxhc3ROb2RlLmtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbmQgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFzdGFydCB8fCAhZW5kKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJhbmdlID0gcmFuZ2Uuc2V0QW5jaG9yKHN0YXJ0KTtcbiAgICAgICAgcmFuZ2UgPSByYW5nZS5zZXRGb2N1cyhlbmQpO1xuICAgICAgICByZXR1cm4gcmFuZ2U7XG4gICAgfVxuXG4gICAgdHJhY2tCeShpbmRleCwgbm9kZTogYW55KSB7XG4gICAgICAgIHJldHVybiBgJHtub2RlLmtleX1fJHtub2RlLnR5cGV9YDtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGRlYnVnLnJlbmRlcignZXhlYyByZW5kZXInLCB0aGlzLm5vZGUudG9KU09OKCkpO1xuICAgICAgICBsZXQgcGx1Z2luUmVuZGVyO1xuICAgICAgICBpZiAodGhpcy5ub2RlLm9iamVjdCA9PT0gJ2Jsb2NrJykge1xuICAgICAgICAgICAgcGx1Z2luUmVuZGVyID0gJ3JlbmRlckJsb2NrJztcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLm5vZGUub2JqZWN0ID09PSAnZG9jdW1lbnQnKSB7XG4gICAgICAgICAgICBwbHVnaW5SZW5kZXIgPSAncmVuZGVyRG9jdW1lbnQnO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMubm9kZS5vYmplY3QgPT09ICdpbmxpbmUnKSB7XG4gICAgICAgICAgICBwbHVnaW5SZW5kZXIgPSAncmVuZGVySW5saW5lJztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb25maWc6IFNsYU5vZGVSZW5kZXJDb25maWcgPSB7XG4gICAgICAgICAgICBlZGl0b3I6IHRoaXMuZWRpdG9yLFxuICAgICAgICAgICAgaXNGb2N1c2VkOiAhIXRoaXMuc2VsZWN0aW9uICYmIHRoaXMuc2VsZWN0aW9uLmlzRm9jdXNlZCxcbiAgICAgICAgICAgIGlzU2VsZWN0ZWQ6ICEhdGhpcy5zZWxlY3Rpb24sXG4gICAgICAgICAgICBub2RlOiB0aGlzLm5vZGUsXG4gICAgICAgICAgICBwYXJlbnQ6IG51bGwsXG4gICAgICAgICAgICByZWFkT25seTogdGhpcy5yZWFkT25seSxcbiAgICAgICAgICAgIGNoaWxkcmVuOiB0aGlzLm5vZGVSZWZzLFxuICAgICAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgICAgICAgIFtEQVRBX0FUVFJTLk9CSkVDVF06IHRoaXMubm9kZS5vYmplY3QsXG4gICAgICAgICAgICAgICAgW0RBVEFfQVRUUlMuS0VZXTogdGhpcy5ub2RlLmtleVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5vZGVWaWV3Q29udGFpbmVyUmVmOiB0aGlzLnZpZXdDb250YWluZXJSZWZcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcmVuZGVyUmVzdWx0OiBIVE1MRWxlbWVudCB8IFNsYU5lc3RlZE5vZGVSZWYgPSB0aGlzLmVkaXRvci5ydW4ocGx1Z2luUmVuZGVyLCBjb25maWcpIGFzIGFueTtcbiAgICAgICAgbGV0IHJlbmRlckRvbSA9IG51bGw7XG4gICAgICAgIGlmIChyZW5kZXJSZXN1bHQgaW5zdGFuY2VvZiBTbGFOZXN0ZWROb2RlUmVmKSB7XG4gICAgICAgICAgICB0aGlzLm5vZGVDb21wb25lbnRSZWYgPSByZW5kZXJSZXN1bHQ7XG4gICAgICAgICAgICByZW5kZXJEb20gPSB0aGlzLm5vZGVDb21wb25lbnRSZWYucm9vdE5vZGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZW5kZXJEb20gPSByZW5kZXJSZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCh0aGlzLmVkaXRvciBhcyBhbnkpLmlzVm9pZCh0aGlzLm5vZGUpKSB7XG4gICAgICAgICAgICBjb25maWcuY2hpbGRyZW4gPSByZW5kZXJEb207XG4gICAgICAgICAgICBjb25zdCB2b2lkUm9vdE5vZGUgPSB0aGlzLnNsYVBsdWdpblJlbmRlclNlcnZpY2UucmVuZGVyQ29tcG9uZW50KFxuICAgICAgICAgICAgICAgIFNsYVZvaWRDb21wb25lbnQsXG4gICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihjb25maWcsIHsgbm9kZVJlZnM6IHRoaXMubm9kZVJlZnMgfSlcbiAgICAgICAgICAgICkucm9vdE5vZGU7XG4gICAgICAgICAgICB0aGlzLnJvb3ROb2RlLnJlcGxhY2VXaXRoKHZvaWRSb290Tm9kZSk7XG4gICAgICAgICAgICB0aGlzLnJvb3ROb2RlID0gdm9pZFJvb3ROb2RlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5yb290Tm9kZS5yZXBsYWNlV2l0aChyZW5kZXJEb20pO1xuICAgICAgICAgICAgdGhpcy5yb290Tm9kZSA9IHJlbmRlckRvbTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldE5vZGVSZWYoaW5kZXg6IG51bWJlcikge1xuICAgICAgICBpZiAoIXRoaXMubm9kZVJlZnMpIHtcbiAgICAgICAgICAgIHdhcm5pbmcoZmFsc2UsICdub2RlUmVmcyBpcyB1bmRlZmluZWQuJyk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5ub2RlUmVmcy5maW5kKChpdGVtLCBpLCBhcnJheSkgPT4gaSA9PT0gaW5kZXgpO1xuICAgIH1cblxuICAgIG5nT25DaGFuZ2VzKHNpbXBsZUNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICAgICAgaWYgKHNpbXBsZUNoYW5nZXMubm9kZSB8fCBzaW1wbGVDaGFuZ2VzLmRlY29yYXRpb25zIHx8IHNpbXBsZUNoYW5nZXMuYW5ub3RhdGlvbnMgfHwgc2ltcGxlQ2hhbmdlcy5zZWxlY3Rpb24pIHtcbiAgICAgICAgICAgIHRoaXMubWVtb1N1Yk5vZGVzKCk7XG4gICAgICAgIH1cbiAgICAgICAgZGVidWcuY2hhbmdlKGBub2RlIGNoYW5nZXNgLCBzaW1wbGVDaGFuZ2VzKTtcbiAgICAgICAgY29uc3Qgc2VsZWN0aW9uQ2hhbmdlID0gc2ltcGxlQ2hhbmdlcy5zZWxlY3Rpb247XG4gICAgICAgIGlmIChzZWxlY3Rpb25DaGFuZ2UgJiYgIXNlbGVjdGlvbkNoYW5nZS5maXJzdENoYW5nZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMubm9kZUNvbXBvbmVudFJlZikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzRm9jdXNlZCA9ICEhdGhpcy5zZWxlY3Rpb24gJiYgdGhpcy5zZWxlY3Rpb24uaXNGb2N1c2VkO1xuICAgICAgICAgICAgICAgIGlmIChpc0ZvY3VzZWQgIT09IHRoaXMubm9kZUNvbXBvbmVudFJlZi5jb21wb25lbnRSZWYuaW5zdGFuY2UuaXNGb2N1c2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubmdab25lLnJ1bigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vZGVDb21wb25lbnRSZWYuY29tcG9uZW50UmVmLmluc3RhbmNlLmlzRm9jdXNlZCA9IGlzRm9jdXNlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm9kZUNvbXBvbmVudFJlZi5jb21wb25lbnRSZWYuY2hhbmdlRGV0ZWN0b3JSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBuZ0RvQ2hlY2soKSB7XG4gICAgICAgIGRlYnVnLmNoZWNrKCdjaGVjayBub2RlJyk7XG4gICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIGRlYnVnKGBuZ09uRGVzdHJveSBub2RlYCk7XG4gICAgICAgIHRoaXMucm9vdE5vZGUucmVtb3ZlKCk7XG4gICAgfVxuXG4gICAgbWVtb1N1Yk5vZGVzKCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubm9kZS5ub2Rlcy5zaXplOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGlvbiA9IHRoaXMuc2VsZWN0aW9uICYmIHRoaXMuZ2V0UmVsYXRpdmVSYW5nZSh0aGlzLm5vZGUsIGksIHRoaXMuc2VsZWN0aW9uKTtcbiAgICAgICAgICAgIGlmICghKHNlbGVjdGlvbiAmJiBzZWxlY3Rpb24uZXF1YWxzKHRoaXMuc3ViU2VsZWN0aW9uc1tpXSkpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdWJTZWxlY3Rpb25zW2ldID0gc2VsZWN0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIl19